# Registry Configuration
REGISTRY_URL=http://localhost:8000
REGISTRY_ADMIN_KEY=9e2b7c1e-4f3a-4b8e-9c2d-7a1e5b6c8d2f
REGISTRY_ENVIRONMENT=production

# Data Agents Configuration
DATA_AGENTS_URL=http://localhost:8000
DATA_AGENTS_ADMIN_KEY=9e2b7c1e-4f3a-4b8e-9c2d-7a1e5b6c8d2f
DATA_AGENTS_ENVIRONMENT=production

# Vault Configuration
# Choose one of: hashicorp, akeyless, azure, gcp, aws
VAULT_TYPE=hashicorp

# Vault Caching Configuration
VAULT_CACHE_ENABLED=true          # Enable/disable secret caching
VAULT_CACHE_TTL=300              # Cache TTL in seconds (5 minutes)
VAULT_MAX_CACHE_SIZE=100         # Maximum number of secrets to cache
VAULT_PRELOAD_CACHE=true         # Preload cache with registry vault keys on startup

# Hashicorp Vault Configuration
VAULT_URL=http://localhost:8200
VAULT_TOKEN=your-vault-token
VAULT_NAMESPACE=your-namespace
VAULT_PATH=your-app-path
VAULT_MOUNT=secret
VAULT_VERIFY_SSL=true               # Set to false for self-signed certificates

# Akeyless Vault Configuration
AKEYLESS_URL=https://api.akeyless.io
AKEYLESS_TOKEN=your-akeyless-token
# OR use access ID/key
AKEYLESS_ACCESS_ID=your-access-id
AKEYLESS_ACCESS_KEY=your-access-key

# Azure Key Vault Configuration
AZURE_KEYVAULT_URL=https://your-keyvault.vault.azure.net/
AZURE_CLIENT_ID=your-client-id
AZURE_CLIENT_SECRET=your-client-secret
AZURE_TENANT_ID=your-tenant-id

# GCP Secret Manager Configuration
GCP_PROJECT_ID=your-project-id
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# AWS Secrets Manager Configuration
AWS_DEFAULT_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key

# Fallback Authentication (for agents without vault configuration)
MCP_DEFAULT_API_KEY=your-default-api-key
MCP_DEFAULT_BEARER_TOKEN=your-default-bearer-token
MCP_DEFAULT_BASIC_USER=your-default-username
MCP_DEFAULT_BASIC_PASS=your-default-password

# LLM Configuration
# Choose your LLM provider: ollama, deepseek, or openai
LLM_PROVIDER=ollama

# For Ollama (local)
LLM_MODEL=qwen2.5:32b
LLM_BASE_URL=http://localhost:11434

# For DeepSeek (API) - uncomment and configure to use DeepSeek
# LLM_PROVIDER=deepseek
# LLM_MODEL=deepseek-reasoner
# LLM_BASE_URL=https://api.deepseek.com
# DEEPSEEK_API_KEY=your_deepseek_api_key_here

# For OpenAI (API) - uncomment and configure to use OpenAI
# LLM_PROVIDER=openai
# LLM_MODEL=gpt-4
# LLM_BASE_URL=https://api.openai.com/v1
# OPENAI_API_KEY=your_openai_api_key_here

# OpenAI Certificate Configuration (for enterprise environments)
# OPENAI_CERT_FILE=/path/to/client.crt
# OPENAI_CERT_KEY=/path/to/client.key
# OPENAI_CA_BUNDLE=/path/to/ca-bundle.crt
# OPENAI_VERIFY_SSL=true

# Alternative DeepSeek models:
# deepseek-reasoner - For complex reasoning tasks
# deepseek-coder - For coding tasks  
# deepseek-chat - For general conversations

# Alternative OpenAI models:
# gpt-4 - Most capable model for complex tasks
# gpt-4-turbo - Faster version of GPT-4
# gpt-3.5-turbo - Cost-effective for simpler tasks

# Multi-Mode LLM Routing Configuration
# Override default routing for specific tasks (optional)
# Available tasks: AGENT_SELECTION, INTENT_ANALYSIS, TOOL_SELECTION, SQL_GENERATION, FINAL_ANSWER, DATA_ANSWER, CONVERSATION, GENERAL
# Available providers: ollama, deepseek, openai

# Example: Use Ollama for fast routing tasks, OpenAI for complex reasoning
# LLM_ROUTING_AGENT_SELECTION=ollama
# LLM_ROUTING_INTENT_ANALYSIS=ollama  
# LLM_ROUTING_TOOL_SELECTION=ollama
# LLM_ROUTING_SQL_GENERATION=openai
# LLM_ROUTING_FINAL_ANSWER=openai
# LLM_ROUTING_DATA_ANSWER=ollama
# LLM_ROUTING_CONVERSATION=openai
# LLM_ROUTING_GENERAL=ollama

# Legacy Ollama Configuration (for backwards compatibility)
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_MODEL=qwen3:14b

# Database Dependencies for Data Agents (Install as needed)
# pip install psycopg2-binary         # For PostgreSQL support
# pip install mysql-connector-python  # For MySQL support  
# pip install google-cloud-bigquery   # For BigQuery support
# pip install databricks-sql-connector # For Databricks support
# pip install pyodbc                  # For SQL Server/MSSQL support
# pip install ibm_db                  # For IBM DB2 support
# pip install sqlparse               # For SQL query parsing and validation
